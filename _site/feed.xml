<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-15T14:37:09+08:00</updated><id>http://localhost:4000/</id><title type="html">Tyrese</title><subtitle>好奇心驱动学习</subtitle><author><name>tyrese yang</name></author><entry><title type="html">HDS协议介绍</title><link href="http://localhost:4000/specification/hds.html" rel="alternate" type="text/html" title="HDS协议介绍" /><published>2018-01-15T00:00:00+08:00</published><updated>2018-01-15T00:00:00+08:00</updated><id>http://localhost:4000/specification/hds</id><content type="html" xml:base="http://localhost:4000/specification/hds.html">&lt;h2 id=&quot;hds简介&quot;&gt;HDS简介&lt;/h2&gt;
&lt;p&gt;HTTP Dynamic Streaming，是Adobe公司设计的协议，分为On-demand模式(点播）和live模式（直播）。Live模式与苹果公司HLS协议的直播类似，都是将直播流切片进行传输。&lt;/p&gt;

&lt;h2 id=&quot;hds直播流&quot;&gt;HDS直播流&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/hds-step.png&quot; alt=&quot;image01&quot; /&gt;&lt;br /&gt;
直播是边录制边播放的过程，所以，数据流在直播过程中需要源源不断地从录制端传输到播放器。HTTP协议指定了我们对资源的请求规则和响应规则，而HDS协议则是在http协议的基础上规定了数据的传输行为以及传输内容的封装格式。以下是HDS协议的传输行为：&lt;br /&gt;
首先，播放器需要知道一个地址，这个地址代表某一个直播内容的地址，比如某一个电视频道的网络直播地址。这个地址其实是一个f4m文件(Flash Media Manifest)，f4m文件中记录着多个视频流的地址，这些视频流都是同样的内容，不同的是他们的码率、语言等等。HDS主要用在码率自适应的场景，因此后面的介绍也围绕着码率自适应来说明。&lt;br /&gt;
播放器拿到f4m文件后，根据当前网络状况选择一路视频流进行播放，在播放的过程中如果遇到网络波动，播放器需要调整当前的播放码率，也就是选择f4m文件中其他码率的视频流进行传输。需要注意的是f4m只在播放器刚开始播放的时候被请求一次。&lt;br /&gt;
HDS播放视频流是通过短连接的方式，那么是如何实现源源不断地视频传输呢？答案就是切片列表和视频切片(f4f)，服务端会随着直播的进行不断将直播流切成一个个短时间的视频片段，这些片段（fragment)被叫做f4f文件(Fragmented F4V file)，这些片段能够独立播放，播放器通过不断请求视频片段和播放视频片段来实现直播的效果，播放器需要知道这些片段的名字才能知道发送一个什么样的URL来请求这些片，这些片的名字就来源于一个叫bootstrapInfo（abst）的列表中，abst会随着直播进行一直被服务器刷新，每当服务器切出新的视频片就将视频片的序号和时间戳等信息添加到列表中，播放器拿到序号后就可以去请求视频片段啦，因此，播放器需要不停去请求abst来更新列表项。协议文档中强调播放器应该拿比较新的视频片来播放，也就是接近列表末尾部分序号比较大的片。&lt;/p&gt;

&lt;h3 id=&quot;视频切片url构造&quot;&gt;视频切片URL构造&lt;/h3&gt;
&lt;p&gt;每个视频切片（fragment）都有一个独一无二的url，url的构造如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;http://&amp;lt;ServerBaseUrl&amp;gt;/&amp;lt;MovieIdentifier&amp;gt;&amp;lt;QualitySegmentUrlModifier&amp;gt;Seg&amp;lt;SegmentNumber&amp;gt;-Frag&amp;lt;FragmentNumber&amp;gt;&lt;/code&gt;&lt;br /&gt;
如果&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ServerEntryCount&amp;gt;&lt;/code&gt;为0，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ServerBaseUrl&amp;gt;&lt;/code&gt;和末尾的斜杆应该被省略。
如果&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;QualityEntryCount&amp;gt;&lt;/code&gt;为0，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;QualitySegmentUrlModifier&amp;gt;&lt;/code&gt;应该被省略。
括号中的字段定义在F4V协议中，序号没有前导0。&lt;br /&gt;
例如：http://www.adobe.com/MyMovie/highSeg1-Frag210&lt;/p&gt;

&lt;h3 id=&quot;f4m文件&quot;&gt;f4m文件&lt;/h3&gt;
&lt;p&gt;Flash Media Manifest，表示一个媒体内容，比如一个电视频道的网络直播，f4m中记录着内容相同但类型不同的视频流，比如不同码率的视频流，播放器可以根据当前的网络状况选择一路视频流进行播放，当网络环境波动时播放器可以切换码率（码率自适应）。f4m只在播放时请求一次。f4m中有两个重要的标签：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;media&amp;gt;&lt;/code&gt;: 表示一个视频流信息，包含该视频流宽、高、比特率及url等信息&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;bootstrapInfo&amp;gt;&lt;/code&gt;: 视频流的播放信息，包含abst文件的地址或者abst信息&lt;/p&gt;

&lt;h3 id=&quot;abst&quot;&gt;abst&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/abst.png&quot; alt=&quot;image02&quot; /&gt;&lt;br /&gt;
Bootstrap Info，切片列表信息，定义在f4v协议中的box类型，记录切片的时间戳、序号和时长等信息，列表信息会随着直播的进行不断更新，播放器可以根据列表中的序号去请求对应的切片。&lt;/p&gt;

&lt;h3 id=&quot;f4v&quot;&gt;f4v&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/f4v.png&quot; alt=&quot;image03&quot; /&gt; &lt;br /&gt;
f4v是mp4格式的一个变种，将数据放在各种box中存放，f4v在mp4的基础上加了几种类型的box，如abst、afra、afrt、asrt等等。Mp4类型的协议通常将整个媒体文件的某些类型信息统一存放在某一类box中，比如moov box中记录了整个文件里所有帧的dts、cts、帧大小以及位置等信息。&lt;/p&gt;

&lt;h3 id=&quot;f4f&quot;&gt;f4f&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/f4v-to-f4f.png&quot; alt=&quot;image04&quot; /&gt;&lt;br /&gt;
f4f是f4v文件的切片，包含4个box：afra、abst、moof、mdat（ps: 实际应用中可能只有mdat部分）。&lt;/p&gt;</content><author><name>tyrese</name></author><category term="documentation" /><category term="live" /><category term="hds" /><summary type="html">HDS简介 HTTP Dynamic Streaming，是Adobe公司设计的协议，分为On-demand模式(点播）和live模式（直播）。Live模式与苹果公司HLS协议的直播类似，都是将直播流切片进行传输。</summary></entry></feed>