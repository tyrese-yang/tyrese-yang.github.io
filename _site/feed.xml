<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-16T12:34:57+08:00</updated><id>http://localhost:4000/</id><title type="html">Tyrese</title><subtitle>好奇心驱动学习</subtitle><author><name>tyrese yang</name></author><entry><title type="html">HDS协议介绍</title><link href="http://localhost:4000/specification/hds.html" rel="alternate" type="text/html" title="HDS协议介绍" /><published>2018-01-15T00:00:00+08:00</published><updated>2018-01-15T00:00:00+08:00</updated><id>http://localhost:4000/specification/hds</id><content type="html" xml:base="http://localhost:4000/specification/hds.html">&lt;h2 id=&quot;hds简介&quot;&gt;HDS简介&lt;/h2&gt;
&lt;p&gt;HTTP Dynamic Streaming，是Adobe公司设计的协议，分为On-demand模式(点播）和live模式（直播）。Live模式与苹果公司HLS协议的直播类似，都是将直播流切片进行传输。&lt;/p&gt;

&lt;h2 id=&quot;hds直播流&quot;&gt;HDS直播流&lt;/h2&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/hds-step.png&quot; width=&quot;400&quot; height=&quot;400&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;① 请求f4m文件，只在播放开始请求一次&lt;br /&gt;
② 在f4m中找到abst url，请求abst文件。abst相当于切片列表，需要在直播过程中进行更新，因此播放器需要持续请求abst文件&lt;br /&gt;
③ 根据abst中的序号，请求fragment，播放fragment&lt;/p&gt;

&lt;p&gt;直播是边录制边播放的过程，所以，数据流在直播过程中需要源源不断地从录制端传输到播放器。HTTP协议指定了我们对资源的请求规则和响应规则，而HDS协议则是在http协议的基础上规定了数据的传输行为以及传输内容的封装格式。以下是HDS协议的传输行为：&lt;br /&gt;
首先，播放器需要知道一个地址，这个地址代表某一个直播内容的地址，比如某一个电视频道的网络直播地址。这个地址其实是一个f4m文件(Flash Media Manifest)，f4m文件中记录着多个视频流的地址，这些视频流都是同样的内容，不同的是他们的码率、语言等等。HDS主要用在码率自适应的场景，因此后面的介绍也围绕着码率自适应来说明。&lt;br /&gt;
播放器拿到f4m文件后，根据当前网络状况选择一路视频流进行播放，在播放的过程中如果遇到网络波动，播放器需要调整当前的播放码率，也就是选择f4m文件中其他码率的视频流进行传输。需要注意的是f4m只在播放器刚开始播放的时候被请求一次。&lt;br /&gt;
HDS播放视频流是通过短连接的方式，那么是如何实现源源不断地视频传输呢？答案就是切片列表和视频切片(f4f)，服务端会随着直播的进行不断将直播流切成一个个短时间的视频片段，这些片段（fragment)被叫做f4f文件(Fragmented F4V file)，这些片段能够独立播放，播放器通过不断请求视频片段和播放视频片段来实现直播的效果，播放器需要知道这些片段的名字才能知道发送一个什么样的URL来请求这些片，这些片的名字就来源于一个叫bootstrapInfo（abst）的列表中，abst会随着直播进行一直被服务器刷新，每当服务器切出新的视频片就将视频片的序号和时间戳等信息添加到列表中，播放器拿到序号后就可以去请求视频片段啦，因此，播放器需要不停去请求abst来更新列表项。协议文档中强调播放器应该拿比较新的视频片来播放，也就是接近列表末尾部分序号比较大的片。&lt;/p&gt;

&lt;h2 id=&quot;视频切片url构造&quot;&gt;视频切片URL构造&lt;/h2&gt;
&lt;p&gt;每个视频切片（fragment）都有一个独一无二的url，url的构造如下：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;http://&amp;lt;ServerBaseUrl&amp;gt;/&amp;lt;MovieIdentifier&amp;gt;&amp;lt;QualitySegmentUrlModifier&amp;gt;Seg&amp;lt;SegmentNumber&amp;gt;-Frag&amp;lt;FragmentNumber&amp;gt;&lt;/code&gt;&lt;br /&gt;
如果&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ServerEntryCount&amp;gt;&lt;/code&gt;为0，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ServerBaseUrl&amp;gt;&lt;/code&gt;和末尾的斜杆应该被省略。
如果&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;QualityEntryCount&amp;gt;&lt;/code&gt;为0，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;QualitySegmentUrlModifier&amp;gt;&lt;/code&gt;应该被省略。&lt;br /&gt;
括号中的字段定义在F4V协议中，序号没有前导0。&lt;br /&gt;
例如：http://www.adobe.com/MyMovie/highSeg1-Frag210&lt;/p&gt;

&lt;h2 id=&quot;f4m文件&quot;&gt;F4M文件&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://ns.adobe.com/f4m/1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;stream1.smil&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;mimeType&amp;gt;&lt;/span&gt;video/mp4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mimeType&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;streamType&amp;gt;&lt;/span&gt;live&lt;span class=&quot;nt&quot;&gt;&amp;lt;/streamType&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;deliveryType&amp;gt;&lt;/span&gt;streaming&lt;span class=&quot;nt&quot;&gt;&amp;lt;/deliveryType&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;bootstrapInfo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;profile=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;named&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p1.abst&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bootstrapInfoId=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;960&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;540&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bitrate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;830&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m1.abst/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;metadata&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/metadata&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/media&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;bootstrapInfo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;profile=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;named&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p2.abst&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bootstrapInfoId=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;721&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;406&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bitrate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;488&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m2.abst/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;metadata&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/metadata&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/media&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;bootstrapInfo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;profile=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;named&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p3.abst&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bootstrapInfoId=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1024&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;576&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bitrate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1464&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m3.abst/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;metadata&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/metadata&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/media&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;bootstrapInfo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;profile=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;named&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p4.abst&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bootstrapInfoId=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1280&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;720&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bitrate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1953&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m4.abst/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;metadata&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/metadata&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/media&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div align=&quot;center&quot;&gt;f4m文件示例&lt;/div&gt;

&lt;p&gt;Flash Media Manifest，表示一个媒体内容，比如一个电视频道的网络直播，f4m中记录着内容相同但类型不同的视频流，比如不同码率的视频流，播放器可以根据当前的网络状况选择一路视频流进行播放，当网络环境波动时播放器可以切换码率（码率自适应）。f4m只在播放时请求一次。f4m中有两个重要的标签：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;media&amp;gt;&lt;/code&gt;: 表示一个视频流信息，包含该视频流宽、高、比特率及url等信息&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;bootstrapInfo&amp;gt;&lt;/code&gt;: 视频流的播放信息，包含abst文件的地址或者abst信息&lt;/p&gt;

&lt;h2 id=&quot;abst&quot;&gt;abst&lt;/h2&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/abst.png&quot; width=&quot;200&quot; height=&quot;150&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Bootstrap Info，切片列表信息，定义在f4v协议中的box类型，记录切片的时间戳、序号和时长等信息，列表信息会随着直播的进行不断更新，播放器可以根据列表中的序号去请求对应的切片。abst中包含asrt、afrt，协议中SegmentRunTableEntries指的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;asrt&lt;/code&gt;，可以有多个；FragmentRunTableEntries是&lt;code class=&quot;highlighter-rouge&quot;&gt;afrt&lt;/code&gt;，也可以有多个。&lt;/p&gt;

&lt;h3 id=&quot;asrt&quot;&gt;asrt&lt;/h3&gt;
&lt;p&gt;asrt用来定位Segment。segment的序号从asrt的SegmentRunEntryTable中计算出来。
SegmentRunEntryTable是一个数组，每个元素有两个字段。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FirstSegment&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;表示一组携带相同数目fragment的segment第一个segment序号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FragmentsPerSegment&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;每个segment包含多少个fragment&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div align=&quot;center&quot;&gt;SegmentRunEntryTable&lt;/div&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;SegmentRunEntryTable[0].FirstSegment = 10&lt;br /&gt;
SegmentRunEntryTable[0].FragmentsPerSegment = 1&lt;br /&gt;
SegmentRunEntryTable[1].FirstSegment = 20&lt;br /&gt;
SegmentRunEntryTable[1].FragmentsPerSegment = 2&lt;br /&gt;
表示segment10 ~ segment19每个segment包含1个fragment，从segment20开始每个segment的fragment数量为2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;afrt&quot;&gt;afrt&lt;/h3&gt;
&lt;p&gt;afrt用来定位fragment（切片）。abst中FragmentRunEntryTable记录切片的序号、时间戳、时长等信息。FragmentRunEntryTable是数组，每个FragmentRunEntryTable对应一个切片。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FirstFragment&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;切片序号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FirstFragmentTimestamp&lt;/td&gt;
      &lt;td&gt;UI64&lt;/td&gt;
      &lt;td&gt;时间戳&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FragmentDuration&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;时长&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DiscontinuityIndicator&lt;/td&gt;
      &lt;td&gt;IF FragmentDuration == 0 UI8&lt;/td&gt;
      &lt;td&gt;不连续描述符，具体见协议&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;f4v&quot;&gt;F4V&lt;/h2&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/f4v.png&quot; width=&quot;400&quot; height=&quot;400&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;f4v是mp4格式的一个变种，将数据放在各种box中存放，f4v在mp4的基础上加了几种类型的box，如abst、afra、afrt、asrt等等。Mp4类型的协议通常将整个媒体文件的某些类型信息统一存放在某一类box中，比如moov box中记录了整个文件里所有帧的dts、cts、帧大小以及位置等信息。&lt;/p&gt;

&lt;h2 id=&quot;f4f&quot;&gt;F4F&lt;/h2&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/f4v-to-f4f.png&quot; width=&quot;400&quot; height=&quot;200&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;f4f是f4v文件的切片，包含4个box：afra、abst、moof、mdat。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/f4f.png&quot; width=&quot;400&quot; height=&quot;200&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;其中：&lt;br /&gt;
afra：用于时移，其中记录了帧的pts和dataOffset等信息，通过pts和dataOffset这两个数据可以算出某个时间的帧在数据的哪个位置&lt;br /&gt;
abst：f4f中的abst和之前所说的abst不同。f4f中的abst记录当前abst文件与前一个abst文件的差异&lt;br /&gt;
moof：类似与moov，记录每个帧的dts、cts、位置等信息&lt;br /&gt;
mdat：音频帧和视频帧数据&lt;br /&gt;
&lt;strong&gt;PS: 实际应用中可以只包含mdat部分&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mdat&quot;&gt;mdat&lt;/h3&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/mdat.png&quot; width=&quot;100&quot; height=&quot;400&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;HDS的mdat容纳的是flv tag数据，每个切片都包括解码所需的音频头和视频头，因此每个切片可以独立播放。因为数据是flv tag，所以每个tag已经携带了dts和cts信息，所以可以不依赖moof进行解码播放。&lt;/p&gt;</content><author><name>tyrese yang</name></author><category term="documentation" /><category term="live" /><category term="hds" /><summary type="html">HDS简介 HTTP Dynamic Streaming，是Adobe公司设计的协议，分为On-demand模式(点播）和live模式（直播）。Live模式与苹果公司HLS协议的直播类似，都是将直播流切片进行传输。</summary></entry><entry><title type="html">FLV协议</title><link href="http://localhost:4000/specification/flv.html" rel="alternate" type="text/html" title="FLV协议" /><published>2018-01-07T00:00:00+08:00</published><updated>2018-01-07T00:00:00+08:00</updated><id>http://localhost:4000/specification/flv</id><content type="html" xml:base="http://localhost:4000/specification/flv.html">&lt;h2 id=&quot;flv格式&quot;&gt;FLV格式&lt;/h2&gt;
&lt;p&gt;FLV格式为&lt;code class=&quot;highlighter-rouge&quot;&gt;heder+body&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;FLV文件中数据存储方式为大端（big-endian）模式&lt;/p&gt;

&lt;p&gt;时间戳单位为毫秒&lt;/p&gt;
&lt;h2 id=&quot;header&quot;&gt;Header&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;标记&lt;/td&gt;
      &lt;td&gt;UI8&lt;/td&gt;
      &lt;td&gt;‘F’(0x46)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;标记&lt;/td&gt;
      &lt;td&gt;UI8&lt;/td&gt;
      &lt;td&gt;‘L’(0x4c)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;标记&lt;/td&gt;
      &lt;td&gt;UI8&lt;/td&gt;
      &lt;td&gt;‘V’(0x56)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;版本&lt;/td&gt;
      &lt;td&gt;UI8&lt;/td&gt;
      &lt;td&gt;flv版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;保留&lt;/td&gt;
      &lt;td&gt;UB[5]&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Audio&lt;/td&gt;
      &lt;td&gt;UB[1]&lt;/td&gt;
      &lt;td&gt;1代表有audio tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;保留&lt;/td&gt;
      &lt;td&gt;UB[1]&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Video&lt;/td&gt;
      &lt;td&gt;UB[1]&lt;/td&gt;
      &lt;td&gt;1代表有video tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DataOffset&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;0x09&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;body&quot;&gt;Body&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PreviousTagSize0&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;0，第一个PreviousTagSize&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tag1&lt;/td&gt;
      &lt;td&gt;FLVTAG&lt;/td&gt;
      &lt;td&gt;第一个tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PreviousTagSize1&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;前一个tag的大小，包括它的头部，单位字节。在第一版FLV中，它的大小是11+前一个tag大小&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tag2&lt;/td&gt;
      &lt;td&gt;FLVTAG&lt;/td&gt;
      &lt;td&gt;第二个Tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;···&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PreviousTagSizeN-1&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;倒数第二个tag的大小&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TagN&lt;/td&gt;
      &lt;td&gt;FLVTAG&lt;/td&gt;
      &lt;td&gt;最后一个Tag，包括头部&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PreviousTagSizeN&lt;/td&gt;
      &lt;td&gt;UI32&lt;/td&gt;
      &lt;td&gt;最后一个tag的大小，包括头部&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;flv-tag-定义&quot;&gt;FLV Tag 定义&lt;/h2&gt;
&lt;h3 id=&quot;flv-tag&quot;&gt;FLV Tag&lt;/h3&gt;
&lt;p&gt;FLV tag包括audio、video的metadata或者sctipts，可选的加密metadata，以及数据负载（payload）&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;保留&lt;/td&gt;
      &lt;td&gt;UB[2]&lt;/td&gt;
      &lt;td&gt;保留给FMS，0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;过滤&lt;/td&gt;
      &lt;td&gt;UB[1]&lt;/td&gt;
      &lt;td&gt;表示数据是否已过滤，0 = 不需要预先处理，1 = 在渲染之前需要预处理（如解密），在未加密文件中应该为0，加密过的Tag需要置该位为1。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tag类型&lt;/td&gt;
      &lt;td&gt;UB[5]&lt;/td&gt;
      &lt;td&gt;该Tag内容类型，8 = 音频，9 = 视频，18 = 脚本。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;数据大小&lt;/td&gt;
      &lt;td&gt;UI24&lt;/td&gt;
      &lt;td&gt;消息的长度，StreamId到tag末尾的长度（相当于tag长度-11）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;时间戳&lt;/td&gt;
      &lt;td&gt;UI24&lt;/td&gt;
      &lt;td&gt;DTS，解码时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;时间戳扩展&lt;/td&gt;
      &lt;td&gt;UI8&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;流ID&lt;/td&gt;
      &lt;td&gt;UI24&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tag头&lt;/td&gt;
      &lt;td&gt;Tag类型为8时表示音频Tag头，为9时表示视频Tag头&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;加密头&lt;/td&gt;
      &lt;td&gt;过滤为1时&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;过滤参数&lt;/td&gt;
      &lt;td&gt;过滤为1时&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;数据&lt;/td&gt;
      &lt;td&gt;Tag类型为8时是音频数据，为9时是视频数据，为18时表示脚本数据&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;音频tag&quot;&gt;音频Tag&lt;/h3&gt;
&lt;h4 id=&quot;音频头&quot;&gt;音频头&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;音频格式&lt;/td&gt;
      &lt;td&gt;UB[4]&lt;/td&gt;
      &lt;td&gt;音频格式，具体格式见FLV文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;音频采样率&lt;/td&gt;
      &lt;td&gt;UB[2]&lt;/td&gt;
      &lt;td&gt;0 = 5.5kHz, 1 = 11kHz, 2 = 22kHz, 3 = 44kHz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;音频位宽&lt;/td&gt;
      &lt;td&gt;UB[1]&lt;/td&gt;
      &lt;td&gt;每个音频采样的位宽，属于未压缩的音频格式，压缩过的格式内部解码为16位。0 = 8位，1 = 16位。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;音频类型&lt;/td&gt;
      &lt;td&gt;UB[1]&lt;/td&gt;
      &lt;td&gt;0 = 单声道，1 = 立体声&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AAC包类型&lt;/td&gt;
      &lt;td&gt;当音频类型 = 10，UI8&lt;/td&gt;
      &lt;td&gt;0 = AAC序列头，1 = AAC裸数据&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;音频数据&quot;&gt;音频数据&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;音频数据&lt;/td&gt;
      &lt;td&gt;当音频类型 = 10为AAC音频数据&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;aac音频数据&quot;&gt;AAC音频数据&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;数据&lt;/td&gt;
      &lt;td&gt;AAC包类型 = 0时为音频定义配置，= 1时为UI8[]类型的AAC帧裸数据&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;视频tag&quot;&gt;视频tag&lt;/h3&gt;
&lt;h4 id=&quot;视频头&quot;&gt;视频头&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;数据&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;帧类型&lt;/td&gt;
      &lt;td&gt;UB[4]&lt;/td&gt;
      &lt;td&gt;1 = 关键帧，2 = 参考帧&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;编码ID&lt;/td&gt;
      &lt;td&gt;UB[4]&lt;/td&gt;
      &lt;td&gt;7 = AVC，其他省略&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AVC包类型&lt;/td&gt;
      &lt;td&gt;当编码ID = 7，UI8&lt;/td&gt;
      &lt;td&gt;0 = AVC序列头，1 = NALU，2 = AVC序列末尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;相对时间戳&lt;/td&gt;
      &lt;td&gt;如果编码ID = 7，SI24&lt;/td&gt;
      &lt;td&gt;CTS，如果AVC包类型 = 1存放相对时间，否则为0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;PTS = DTS + CTS&lt;/p&gt;
&lt;h4 id=&quot;视频数据&quot;&gt;视频数据&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;视频tag body&lt;/td&gt;
      &lt;td&gt;根据帧类型定义&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;avc视频包&quot;&gt;AVC视频包&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字段&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;数据&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;数据&lt;/td&gt;
      &lt;td&gt;如果AVC包类型 = 0表示AVC解码配置记录，= 1表示1个或多个NALU&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一般第一个音频tag和第一个视频tag是解码配置记录，记录解码所需的参数，比如h264中的SPS、PPS，aac中的ADTS header。&lt;/p&gt;
&lt;h4 id=&quot;脚本数据&quot;&gt;脚本数据&lt;/h4&gt;
&lt;p&gt;见官方文档&lt;/p&gt;</content><author><name>tyrese yang</name></author><category term="documentation" /><category term="live" /><category term="flv" /><summary type="html">FLV格式 FLV格式为heder+body</summary></entry></feed>